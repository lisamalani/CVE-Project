
from skimage import measure
import numpy as np
import open3d as o3d


def make_mesh(image, threshold=-300, step_size=1):
    print("Transposing surface")
    p = image.transpose(2,1,0)
    
    print("Calculating surface")
    verts, faces, norm, val = measure.marching_cubes(p, threshold, step_size=step_size, allow_degenerate=True) 
    return verts, faces


def create_ply(vertices, filename, colors = None):
    # Writes a point cloud ply file
    if colors is None:
        colors = np.ones_like(vertices)
        colors = colors.reshape(-1, 3)
        colors[:, 0] = colors[:, 0] * 136
        colors[:, 1] = colors[:, 1] * 158
        z_min, z_max = min(vertices[:, 2]), max(vertices[:, 2])
        colors[:, 2] = ((z_min +vertices[:, 2])/(z_max - z_min)) * 217

    vertices = np.hstack([vertices.reshape(-1, 3), colors])

    ply_header = '''ply
        format ascii 1.0
        element vertex %(vert_num)d
        property float x
        property float y
        property float z
        property uchar red
        property uchar green
        property uchar blue
        end_header
        '''
    with open(filename, 'w') as f:
        f.write(ply_header % dict(vert_num=len(vertices)))
        np.savetxt(f, vertices, '%f %f %f %d %d %d')


def read_ply(ply_file):
	# Displays point cloud files
	ply = o3d.io.read_point_cloud(ply_file)
	o3d.visualization.draw_geometries([ply])