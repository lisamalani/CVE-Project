import matplotlib.pyplot as plt
from skimage import measure
from plotly.tools import FigureFactory as FF
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import numpy as np
import open3d as o3d

def make_mesh(image, threshold=-300, step_size=1):
    print("Transposing surface")
    p = image.transpose(2,1,0)
    
    print("Calculating surface")
    verts, faces, norm, val = measure.marching_cubes(p, threshold, step_size=step_size, allow_degenerate=True) 
    return verts, faces


def plotly_3d(verts, faces):
    x,y,z = zip(*verts) 
    print("Drawing")

    # Make the colormap single color since the axes are positional not intensity. 
    # colormap=['rgb(255,105,180)','rgb(255,255,51)','rgb(0,191,255)']
    colormap=['rgb(236, 236, 212)','rgb(236, 236, 212)']
    
    fig = FF.create_trisurf(x=x,
                            y=y, 
                            z=z, 
                            plot_edges=True,
                            colormap=colormap,
                            simplices=faces,
                            backgroundcolor='rgb(64, 64, 64)',
                            title="Interactive Visualization")

    iplot(fig)


def plt_3d(verts, faces):
    print("Drawing")
    x,y,z = zip(*verts) 
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')

    # Fancy indexing: `verts[faces]` to generate a collection of triangles
    mesh = Poly3DCollection(verts[faces], linewidths=0.05, alpha=1)
    face_color = [1, 1, 0.9]
    mesh.set_facecolor(face_color)
    ax.add_collection3d(mesh)

    ax.set_xlim(0, max(x))
    ax.set_ylim(0, max(y))
    ax.set_zlim(0, max(z))
    # ax.set_facecolor((0.7, 0.7, 0.7))
    plt.show()


def create_ply(vertices, filename, colors = None):
    # Writes a point cloud ply file
    if colors is None:
        colors = np.ones_like(vertices)
        colors = colors.reshape(-1, 3)
        colors[:, 0] = colors[:, 0] * 136
        colors[:, 1] = colors[:, 1] * 158
        z_min, z_max = min(vertices[:, 2]), max(vertices[:, 2])
        colors[:, 2] = ((z_min +vertices[:, 2])/(z_max - z_min)) * 217

    vertices = np.hstack([vertices.reshape(-1, 3), colors])

    ply_header = '''ply
        format ascii 1.0
        element vertex %(vert_num)d
        property float x
        property float y
        property float z
        property uchar red
        property uchar green
        property uchar blue
        end_header
        '''
    with open(filename, 'w') as f:
        f.write(ply_header % dict(vert_num=len(vertices)))
        np.savetxt(f, vertices, '%f %f %f %d %d %d')

def read_ply(ply_file):
	# Displays point cloud files
	ply = o3d.io.read_point_cloud(ply_file)
	o3d.visualization.draw_geometries([ply])

	# visualizer = o3d.Visualizer()
	# visualizer.add_geometry(ply)
	# visualizer.show()