"""
The file describes the steps in the process to visualize DICOM data 
and performs segmentation for the same.
"""

# %%
### Imports
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
import cv2
from tqdm import tqdm
from skimage import measure, morphology
from sklearn.cluster import KMeans, MeanShift, estimate_bandwidth

from load_read_dicom import load_scan, get_pixels_hu, sample_stack, resample
from mesh import make_mesh, create_ply, read_ply
from segmentation import make_hole_mask, make_teeth_mask


# %%
### Dataset directory
dataset_path = '../data/CBCTImages_HumanMaxilla(Max1-2)/'
# dataset_path = '../data/Class-3-malocculusion/DICOM/'
# Directory to store output 
output_path = '../output/'

dicom_files = os.listdir(dataset_path)
# Print out the first 5 file names to verify we're in the right folder.
print(f"Reading data from {dataset_path}")
print(f"Total of {len(dicom_files)} DICOM images.")

# %%
### Load, read, and display DICOM scans
id = 0
patient = load_scan(dataset_path)
images = get_pixels_hu(patient)

### Save scans
save_path = os.path.join(output_path, f"fullimages_{id}.npy")
np.save(save_path, images)

### Create a histogram of all the voxel data in the study
images_to_process = np.load(save_path).astype(np.float64)
plt.figure(figsize=(11, 7))
sns.set_style("whitegrid")
ax = sns.histplot(data=images_to_process.flatten(), bins=100, color="lightblue")
ax.set(xlabel="Hounsfield Units (HU)", ylabel="Frequency")
plt.xlim(-5000, 5000)
plt.xlabel("Hounsfield Units (HU)")
plt.ylabel("Frequency")
plt.title("")

# %%
### Displaying image stack
id = 0
images_to_process = np.load(save_path)
show_every = 12

if "Class_3_malocclusion" in dataset_path:
    images_to_process = images_to_process[175:550]
    show_every = 8

sample_stack(images_to_process, show_every=show_every)

# %%
### Resampling
print(f"Slice Thickness: {patient[0].SliceThickness}")
print(f"Pixel Spacing (row, col): {patient[0].PixelSpacing[0]} , {patient[0].PixelSpacing[1]}")

# Because a CT slice is typically reconstructed at 512 x 512 voxels, each slice represents approximately 370 mm of data in length and width.
resampling_steps = [0.1, 0.1, 0.1]
if "Class_3_malocclusion" in dataset_path:
    resampling_steps = [0.25, 0.25, 0.25]
    
print(f"Shape before resampling: {images_to_process.shape}")
images_after_resample, spacing = resample(images_to_process, patient, resampling_steps)
print(f"Shape after resampling: {images_after_resample.shape}")

# %%
### 3D Plotting
# The marching cubes algorithm is used to generate a 3D mesh from the dataset. The plotly model will utilize a higher step_size with lower voxel threshold to avoid overwhelming the display.

verts, faces = make_mesh(images_after_resample, threshold=350, step_size=1)

color_resampled_image = ((images_after_resample - np.min(images_after_resample)) / (np.max(images_after_resample) - np.min(images_after_resample))) * 255
color_resampled_image = color_resampled_image.transpose(2,1,0)

resampled_colors = color_resampled_image[verts[:, 0].astype(np.int), verts[:, 1].astype(np.int), verts[:, 2].astype(np.int)]
resampled_colors = cv2.cvtColor(resampled_colors.astype(np.uint8), cv2.COLOR_GRAY2BGR).squeeze(1)

# Create point cloud PLY
if "Class_3_malocclusion" in dataset_path:
    ply_file = "full_stack_skull.ply"
else:
    ply_file = "full_stack.ply"

create_ply(verts, filename=ply_file, colors=resampled_colors)
read_ply(ply_file)

# %%
### Segmentation - Tooth Decay

# One example for sanity check
image = images_after_resample[202]
make_hole_mask(image, display=True, meanShift=False)
# %%
### Segmentation - Tooth Visualization
# Apply Masks to All Slices
masked_teeth = []
for img in tqdm(images_after_resample):
    masked_teeth.append(make_teeth_mask(img))

sample_stack(masked_teeth, show_every=show_every)
# save_masked = os.path.join(output_path, f"maskedimages_{id}.npy")
# np.save(output_path + "maskedimages_%d.npy" % (id), masked_teeth)

masked_teeth = np.array(masked_teeth)
print(masked_teeth.shape, np.min(masked_teeth), np.max(masked_teeth))
verts, faces = make_mesh(masked_teeth, threshold=350, step_size=1)

color_masked_teeth = (masked_teeth / np.max(masked_teeth)) * 255
color_masked_teeth = color_masked_teeth.transpose(2,1,0)

teeth_colors = color_masked_teeth[verts[:, 0].astype(np.int), verts[:, 1].astype(np.int), verts[:, 2].astype(np.int)]
teeth_colors = cv2.cvtColor(teeth_colors.astype(np.uint8), cv2.COLOR_GRAY2BGR).squeeze(1)

# Create point cloud PLY
if "Class_3_malocclusion" in dataset_path:
    ply_file = "teeth_only_skull.ply"
else:
    ply_file = "teeth_only.ply"

create_ply(verts, filename=ply_file, colors=teeth_colors)
read_ply(ply_file)
# %%
