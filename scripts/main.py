'''
The file describes the steps in the process to visualize DICOM data 
and performs segmentation for the same.
'''

# %%
import matplotlib.pyplot as plt
import numpy as np
import os

from load_read_dicom import load_scan, get_pixels_hu, resample
from mesh import make_mesh, plotly_3d, plt_3d
from segmentation import make_mask


# %%
### Path to dataset
dataset_path = 'D:/MSSD_CMU/SEM 03/CVE/Project/data/CBCTImages_HumanMaxilla(Max1-2)/'
# Directory to store output 
output_path = 'D:\MSSD_CMU\SEM 03\CVE\Project/output/'

dicom_files = os.listdir(dataset_path)
# Print out the first 5 file names to verify we're in the right folder.
print(f"Reading data from {dataset_path}")
print(f"Total of {len(dicom_files)} DICOM images.")

# %%
### Load, read, and display DICOM scans
id=0
patient = load_scan(dataset_path)
images = get_pixels_hu(patient)

### Save scans
save_path = os.path.join(output_path, f"fullimages_{id}.npy")
np.save(save_path, images)

### Create a histogram of all the voxel data in the study
images_to_process = np.load(save_path).astype(np.float64) 
plt.subplots(figsize=(10, 5))
plt.hist(images_to_process.flatten(), bins=50, color='c')
plt.xlim(-5000, 5000)
plt.xlabel("Hounsfield Units (HU)")
plt.ylabel("Frequency")
plt.show()

# %%
### Displaying an Image Stack
id = 0
imgs_to_process = np.load(save_path)

def sample_stack(stack, rows=6, cols=6, start_with=10, show_every=12):
    fig,ax = plt.subplots(rows,cols,figsize=[30,30])
    for i in range(rows*cols):
        ind = start_with + i*show_every
        ax[int(i/rows),int(i % rows)].set_title(f'slice {ind}')
        ax[int(i/rows),int(i % rows)].imshow(stack[ind],cmap='gray')
        ax[int(i/rows),int(i % rows)].axis('off')
    plt.show()

sample_stack(imgs_to_process)

# %%
### Resampling

print(f"Slice Thickness: {patient[0].SliceThickness}")
print(f"Pixel Spacing (row, col): {patient[0].PixelSpacing[0]} , {patient[0].PixelSpacing[1]}")
# Because a CT slice is typically reconstructed at 512 x 512 voxels, each slice represents approximately 370 mm of data in length and width.

print(f"Shape before resampling: {images_to_process.shape}")
images_after_resample, spacing = resample(imgs_to_process, patient, [0.1,0.1,0.1])
print(f"Shape after resampling: {images_after_resample.shape}")

# %%
### 3D Plotting
# The marching cubes algorithm is used to generate a 3D mesh from the dataset. The plotly model will utilize a higher step_size with lower voxel threshold to avoid overwhelming the display.

verts, faces = make_mesh(images_after_resample, threshold=350, step_size=1)
# plt_3d(verts, faces)
plotly_3d(verts, faces)

# %%
### Segmentation

# One example for sanity check
image = images_after_resample[50]
make_mask(image, display=True)

# Apply Masks to All Slices
masked_teeth = []
for img in images_after_resample:
    masked_teeth.append(make_mask(img))

sample_stack(masked_teeth, show_every=10)
save_masked = os.path.join(output_path, f"maskedimages_{id}.npy", images)
np.save(output_path + "maskedimages_%d.npy" % (id), images)
# %%
