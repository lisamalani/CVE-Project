'''  
Loop over the image files and store everything into a list.
'''

import dicom
from pydicom import dcmread
import matplotlib.pyplot as plt
import numpy as np
import os
import scipy.ndimage

def load_scan(path):
    '''
    The function will load all DICOM images from a folder into a list for manipulation.
    
    Args:
        path: dataset path
    
    Returns:
        image slices
    '''
    slices = []
    try:
        for s in os.listdir(path):
            if s.endswith('dcm'):
                slices.append(dicom.read_file(path + '/' + s))
            if s.startswith('I'):
                slices.append(dcmread(path + '/' + s))
        # slices = [dicom.read_file(path + '/' + s) for s in os.listdir(path)]
    except Exception as e:
        print(path, s)
        raise e
    slices.sort(key = lambda x: int(x.InstanceNumber))

    try:
        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])
    except:
        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)
        
    for s in slices:
        s.SliceThickness = slice_thickness
        
    return slices



def get_pixels_hu(scans):
    '''
    The voxel values in the images are raw. get_pixels_hu converts raw values into Houndsfeld units(HU).

    The transformation is linear. Therefore, so long as have a slope and an intercept, can rescale a voxel value to HU.

    Both the rescale intercept and rescale slope are stored in the DICOM header at the time of image 
    acquisition (these values are scanner-dependent, so will need external information).

    Args:
        scans: list of DICOM slices

    Returns:
        image stack: np.array

    '''
    image = np.stack([s.pixel_array for s in scans])
    # Convert to int16 (from sometimes int16)
    # should be possible as values should always be low enough (<32k)
    image = image.astype(np.int16)

    # Set outside-of-scan pixels to 1
    # The intercept is usually -1024, so air is approximately 0
    image[image == -2000] = 0
    
    # Convert to Hounsfield units (HU)
    # HU = slope * image + incercept
    intercept = scans[0].RescaleIntercept
    slope = scans[0].RescaleSlope
    
    if slope != 1:
        image = slope * image.astype(np.float64)
        image = image.astype(np.int16)
    image += np.int16(intercept)
    
    return np.array(image, dtype=np.int16)


def sample_stack(stack, rows=6, cols=6, start_with=10, show_every=12):
    fig, ax = plt.subplots(rows, cols, figsize=[30, 30])
    for i in range(rows * cols):
        ind = start_with + i * show_every
        ax[int(i / rows), int(i % rows)].set_title(f"slice {ind}")
        ax[int(i / rows), int(i % rows)].imshow(stack[ind], cmap="gray")
        ax[int(i / rows), int(i % rows)].axis("off")
    plt.show()



def resample(image, scan, new_spacing=[0.1,0.1,0.1]):
    # Determine current pixel spacing
    spacing = map(float, ([scan[0].SliceThickness] + list(scan[0].PixelSpacing)))
    spacing = np.array(list(spacing))

    resize_factor = spacing / new_spacing
    new_real_shape = image.shape * resize_factor
    new_shape = np.round(new_real_shape)
    real_resize_factor = new_shape / image.shape
    new_spacing = spacing / real_resize_factor
    
    image = scipy.ndimage.interpolation.zoom(image, real_resize_factor)
    
    return image, new_spacing